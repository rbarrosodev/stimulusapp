"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _stimulus = require("stimulus");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _config = {
  error: 'error',
  invalid: 'invalid',
  template: '<span class="{error}"><br>{message}</span>',
  debug: 'false'
};

var _default =
/*#__PURE__*/
function (_Controller) {
  _inherits(_default, _Controller);

  function _default() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, _default);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "log", function (msg, info) {
      if (!_this.debug) return;

      if (info) {
        var field = info.field;

        if (field) {
          if (field.type === 'hidden') {
            msg += ' hidden';
          }

          if (!field.id && field.name) {
            msg += ' ' + field.name;
          }
        }

        console.log(msg, info);
      } else {
        console.log(msg);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onBlur", function (event) {
      _this.log('^^^ onBlur', {
        field: event.target
      });

      _this.validateField(event.target);
    });

    _defineProperty(_assertThisInitialized(_this), "onSubmit", function (event) {
      _this.formIsValid = _this.validateForm();

      if (_this.formIsValid) {
        _this.log('^^^ onSubmit Okay', {
          event: event
        });
      } else {
        _this.log('^^^ onSubmit Skip', {
          event: event
        });

        event.preventDefault();

        _this.firstInvalidField.focus();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onAjax", function (event) {
      if (_this.formIsValid) {
        _this.log('^^^ onAjax Okay', {
          event: event
        });
      } else {
        _this.log('^^^ onAjax Skip', {
          event: event
        });

        event.preventDefault();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "validateForm", function () {
      _this.log('<<< Form', {
        form: _this.element
      });

      var isValid = true;

      _this.formFields.forEach(function (field) {
        if (_this.shouldValidateField(field) && !_this.validateField(field)) isValid = false;
      });

      _this.log(">>> Form ".concat(isValid ? 'Valid' : 'Invalid!'), {
        form: _this.element
      });

      return isValid;
    });

    _defineProperty(_assertThisInitialized(_this), "validateField", function (field) {
      if (!_this.shouldValidateField(field)) {
        return true;
      }

      var isValid = field.checkValidity();
      field.classList.toggle(_this.invalid, !isValid);

      _this.refreshErrorForInvalidField(field, isValid);

      if (isValid) {
        _this.log('___ Valid', {
          field: field
        });
      }

      return isValid;
    });

    _defineProperty(_assertThisInitialized(_this), "shouldValidateField", function (field) {
      var shouldValidate = field.checkValidity && !field.disabled && !['file', 'reset', 'submit', 'button'].includes(field.type);

      if (!shouldValidate) {
        _this.log('___ Skip', {
          field: field
        });
      }

      return shouldValidate;
    });

    _defineProperty(_assertThisInitialized(_this), "refreshErrorForInvalidField", function (field, isValid) {
      _this.removeExistingErrorMessage(field);

      if (!isValid) _this.showErrorForInvalidField(field);
    });

    _defineProperty(_assertThisInitialized(_this), "removeExistingErrorMessage", function (field) {
      var existingErrorMessageElement = field.parentNode.querySelector('.' + _this.error);
      if (existingErrorMessageElement) existingErrorMessageElement.parentNode.removeChild(existingErrorMessageElement);
    });

    _defineProperty(_assertThisInitialized(_this), "showErrorForInvalidField", function (field) {
      field.insertAdjacentHTML('afterend', _this.buildFieldErrorHtml(field));
    });

    _defineProperty(_assertThisInitialized(_this), "buildFieldErrorHtml", function (field) {
      var errorHtml = _this.template;
      errorHtml = errorHtml.replace(/{error}/g, _this.error);
      errorHtml = errorHtml.replace(/{message}/g, field.validationMessage);

      _this.log('___ Invalid!', {
        field: field,
        errorHtml: errorHtml
      });

      return errorHtml;
    });

    return _this;
  }

  _createClass(_default, [{
    key: "initialize",
    value: function initialize() {
      this.error = this.data.get('error') || _config.error;
      this.invalid = this.data.get('invalid') || _config.invalid;
      this.template = this.data.get('template') || _config.template;

      var debug_s = (this.data.get('debug') || _config.debug).toString().toLowerCase();

      this.debug = !['false', 'f', 'off', '0', ''].includes(debug_s);
      this.log('=== initialize', {
        form: this.element,
        error: this.error,
        invalid: this.invalid,
        template: this.template,
        debug: this.debug
      });
    }
  }, {
    key: "connect",
    value: function connect() {
      this.log('=== connect', {
        form: this.element
      });
      this.element.setAttribute('novalidate', true);
      this.element.addEventListener('blur', this.onBlur, true);
      this.element.addEventListener('submit', this.onSubmit);
      this.element.addEventListener('ajax:beforeSend', this.onAjax);
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.log('=== disconnect', {
        form: this.element
      });
      this.element.removeEventListener('blur', this.onBlur);
      this.element.removeEventListener('submit', this.onSubmit);
      this.element.removeEventListener('ajax:beforeSend', this.onAjax);
    }
  }, {
    key: "formFields",
    get: function get() {
      return Array.from(this.element.elements);
    }
  }, {
    key: "firstInvalidField",
    get: function get() {
      return this.formFields.find(function (field) {
        return !field.checkValidity();
      });
    }
  }], [{
    key: "config",
    value: function config() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      Object.assign(_config, options);
    }
  }]);

  return _default;
}(_stimulus.Controller);

exports["default"] = _default;