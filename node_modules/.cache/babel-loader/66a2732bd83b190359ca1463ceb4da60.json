{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _stimulus = require(\"stimulus\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _config = {\n  error: 'error',\n  invalid: 'invalid',\n  template: '<span class=\"{error}\"><br>{message}</span>',\n  debug: 'false'\n};\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  function _default() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"log\", function (msg, info) {\n      if (!_this.debug) return;\n\n      if (info) {\n        var field = info.field;\n\n        if (field) {\n          if (field.type === 'hidden') {\n            msg += ' hidden';\n          }\n\n          if (!field.id && field.name) {\n            msg += ' ' + field.name;\n          }\n        }\n\n        console.log(msg, info);\n      } else {\n        console.log(msg);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      _this.log('^^^ onBlur', {\n        field: event.target\n      });\n\n      _this.validateField(event.target);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (event) {\n      _this.formIsValid = _this.validateForm();\n\n      if (_this.formIsValid) {\n        _this.log('^^^ onSubmit Okay', {\n          event: event\n        });\n      } else {\n        _this.log('^^^ onSubmit Skip', {\n          event: event\n        });\n\n        event.preventDefault();\n\n        _this.firstInvalidField.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAjax\", function (event) {\n      if (_this.formIsValid) {\n        _this.log('^^^ onAjax Okay', {\n          event: event\n        });\n      } else {\n        _this.log('^^^ onAjax Skip', {\n          event: event\n        });\n\n        event.preventDefault();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateForm\", function () {\n      _this.log('<<< Form', {\n        form: _this.element\n      });\n\n      var isValid = true;\n\n      _this.formFields.forEach(function (field) {\n        if (_this.shouldValidateField(field) && !_this.validateField(field)) isValid = false;\n      });\n\n      _this.log(\">>> Form \".concat(isValid ? 'Valid' : 'Invalid!'), {\n        form: _this.element\n      });\n\n      return isValid;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateField\", function (field) {\n      if (!_this.shouldValidateField(field)) {\n        return true;\n      }\n\n      var isValid = field.checkValidity();\n      field.classList.toggle(_this.invalid, !isValid);\n\n      _this.refreshErrorForInvalidField(field, isValid);\n\n      if (isValid) {\n        _this.log('___ Valid', {\n          field: field\n        });\n      }\n\n      return isValid;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"shouldValidateField\", function (field) {\n      var shouldValidate = field.checkValidity && !field.disabled && !['file', 'reset', 'submit', 'button'].includes(field.type);\n\n      if (!shouldValidate) {\n        _this.log('___ Skip', {\n          field: field\n        });\n      }\n\n      return shouldValidate;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"refreshErrorForInvalidField\", function (field, isValid) {\n      _this.removeExistingErrorMessage(field);\n\n      if (!isValid) _this.showErrorForInvalidField(field);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeExistingErrorMessage\", function (field) {\n      var existingErrorMessageElement = field.parentNode.querySelector('.' + _this.error);\n      if (existingErrorMessageElement) existingErrorMessageElement.parentNode.removeChild(existingErrorMessageElement);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showErrorForInvalidField\", function (field) {\n      field.insertAdjacentHTML('afterend', _this.buildFieldErrorHtml(field));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"buildFieldErrorHtml\", function (field) {\n      var errorHtml = _this.template;\n      errorHtml = errorHtml.replace(/{error}/g, _this.error);\n      errorHtml = errorHtml.replace(/{message}/g, field.validationMessage);\n\n      _this.log('___ Invalid!', {\n        field: field,\n        errorHtml: errorHtml\n      });\n\n      return errorHtml;\n    });\n\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.error = this.data.get('error') || _config.error;\n      this.invalid = this.data.get('invalid') || _config.invalid;\n      this.template = this.data.get('template') || _config.template;\n\n      var debug_s = (this.data.get('debug') || _config.debug).toString().toLowerCase();\n\n      this.debug = !['false', 'f', 'off', '0', ''].includes(debug_s);\n      this.log('=== initialize', {\n        form: this.element,\n        error: this.error,\n        invalid: this.invalid,\n        template: this.template,\n        debug: this.debug\n      });\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      this.log('=== connect', {\n        form: this.element\n      });\n      this.element.setAttribute('novalidate', true);\n      this.element.addEventListener('blur', this.onBlur, true);\n      this.element.addEventListener('submit', this.onSubmit);\n      this.element.addEventListener('ajax:beforeSend', this.onAjax);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.log('=== disconnect', {\n        form: this.element\n      });\n      this.element.removeEventListener('blur', this.onBlur);\n      this.element.removeEventListener('submit', this.onSubmit);\n      this.element.removeEventListener('ajax:beforeSend', this.onAjax);\n    }\n  }, {\n    key: \"formFields\",\n    get: function get() {\n      return Array.from(this.element.elements);\n    }\n  }, {\n    key: \"firstInvalidField\",\n    get: function get() {\n      return this.formFields.find(function (field) {\n        return !field.checkValidity();\n      });\n    }\n  }], [{\n    key: \"config\",\n    value: function config() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      Object.assign(_config, options);\n    }\n  }]);\n\n  return _default;\n}(_stimulus.Controller);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}